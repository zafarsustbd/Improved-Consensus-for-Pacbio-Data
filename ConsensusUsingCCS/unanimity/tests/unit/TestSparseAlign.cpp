// Copyright (c) 2014-2015, Pacific Biosciences of California, Inc.
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted (subject to the limitations in the
// disclaimer below) provided that the following conditions are met:
//
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//  * Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials provided
//    with the distribution.
//
//  * Neither the name of Pacific Biosciences nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
// GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY PACIFIC
// BIOSCIENCES AND ITS CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PACIFIC BIOSCIENCES OR ITS
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
// USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
// OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

// Author: Lance Hepler

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <pacbio/ccs/SparseAlignment.h>

TEST(SparseAlignTest, ExactAlign)
{
    using namespace std;

    const size_t K = 5;
    string s1 = "ACGTACACACAGTACAGTACAAGTTTCACGGACATTTGGTTCCCACTTGTACAGTGCACACGGGTTACACGT";
    auto chain = PacBio::CCS::SparseAlign<K>(s1, s1);
    auto fst = chain[0];
    auto lst = chain[chain.size() - 1];

    EXPECT_EQ(s1.size() - K + 1, chain.size());
    EXPECT_EQ(0, fst.first);
    EXPECT_EQ(0, fst.second);
    EXPECT_EQ(s1.size() - K, lst.first);
    EXPECT_EQ(s1.size() - K, lst.second);
}

TEST(SparseAlignTest, ExactPartial)
{
    using namespace std;

    const size_t K = 5;
    string s1 = "ACGTACACACAGTACAGTACAAGTTTCACGGACATTTGGTTCCCACTTGTACAGTGCACACGGGTTACACGT";
    string s2 = "TTTGGTTCCCACTTGTACAGTGCACACGGGTTACACGT";
    auto chain = PacBio::CCS::SparseAlign<K>(s1, s2);
    auto fst = chain[0];
    auto lst = chain[chain.size() - 1];

    EXPECT_EQ(s2.size() - K + 1, chain.size());
    EXPECT_EQ(34, fst.first);
    EXPECT_EQ(0, fst.second);
    EXPECT_EQ(s1.size() - K, lst.first);
    EXPECT_EQ(s2.size() - K, lst.second);
}

TEST(SparseAlignTest, InsertAlign)
{
    using namespace std;

    const size_t K = 5;
    string s1 = "ACGTACACACAGTACAGTACAAGTTTCACGGACATTTGGTTCCCACTTGTACAGTGCACACGGGTTACACGT";
    string s2 =
        "ACGTACACACAGTACAGTACAAGTTTCACGGACATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATTGGTTCCCACTTGTAC"
        "AGTGCACACGGGTTACACGT";
    auto chain = PacBio::CCS::SparseAlign<K>(s1, s2);
    auto fst = chain[0];
    auto lst = chain[chain.size() - 1];

    EXPECT_EQ(0, fst.first);
    EXPECT_EQ(0, fst.second);
    EXPECT_EQ(s1.size() - K, lst.first);
    EXPECT_EQ(s2.size() - K, lst.second);
}

TEST(SparseAlignTest, NoAlign)
{
    using namespace std;

    const size_t K = 5;
    string s1 = "ACGTACACACAGTACAGTACAAGTTTCACGGACATTTGGTTCCCACTTGTACAGTGCACACGGGTTACACGT";
    string s2 = "AAAATCCCCCCCCCCAGGGGG";
    auto chain = PacBio::CCS::SparseAlign<K>(s1, s2);

    EXPECT_EQ(0, chain.size());
}

TEST(SparseAlignTest, SimpleAlign)
{
    using namespace std;

    const size_t K = 5;
    string s1 = "ACGTACACACAGTACAGTACAAGTTTCACGGACATTTGGTTCCCACTTGTACAGTGCACACGGGTTACACGT";
    string s2 = "ACGTACACCAGTAAGTACAAGTTTCACGCGAATTTGGTTCCCACTTGTCAAGTGCACACGGGTTACACGT";
    auto chain = PacBio::CCS::SparseAlign<K>(s1, s2);
    auto fst = chain[0];
    auto lst = chain[chain.size() - 1];

    EXPECT_EQ(0, fst.first);
    EXPECT_EQ(0, fst.second);
    EXPECT_EQ(s1.size() - K, lst.first);
    EXPECT_EQ(s2.size() - K, lst.second);
}

TEST(SparseAlignTest, LongAlign)
{
    using namespace std;

    const size_t K = 5;
    string s1 =
        "AGAGAACATCGCTATCCGCAGATAAAGCAAATCCTTCCAGACCAACAACCAATCGTAGCAAAAACATTCAGCGAACAGCAACACGCAGTT"
        "AGACCAACGAAAACTATGGGACAGCTAGATAGACACACAACATACAAAAAATATAACTCGCCCCATAGATCACAATAGAGCTGGATGCAG"
        "AAAGACTAGAAGAAGTGGGTGTATACGCAGCATTAAACAGCAGAGAGATAGTTCCTAACAAACAGACATATGGGTAATAAGACACAATCA"
        "ACAAAGCAAACATAAGAGCGAATATTGCAGGATAACTAATTAGAAGCTAATAAATACGAAACTACAGAGCAGTAAGACCAGATTAAATGA"
        "GAAATCGACGAACCGAGACTGGACTCATGGAAGTGGAAGAACAGATAAGAAAGACAAGAACATGAAAAAATCAGATATAAGATATATACT"
        "CCAGATGGACAGAACAATAACATAATGCACATACTAATACACACAGAGAGCGAATCAAGACGACTGAAATATATAACAAATATATACACA"
        "TTGTACACACAACAACAGGATATTCTGAGTACCAAAGCTCAACAGTATTGCAGGATAAAATACACAGAAGAGACACATATATACGGATAT"
        "ACAGGGAACCAGAAATACACGCGAATGACTGTTCTGGAAGCCATTTATAGACAGTAAGAATATGGCACCCAATACATACACGCACGTATA"
        "CTGACACACAAAGACAGATTACATCATACACACAATGACACATTTGGGCGAGAGATTACAACCACGTATGAATACAACAAGAGAAACCGA"
        "CGCAAACAACATAGATCAGATATTTAGCTGAAAAATGTACCAGAACTTTAGAAGAAAGGAAAATACACTACAAGCATAGGTGAGAAGCAC"
        "AACCATTCGATTATGCAACAGAATCTACAGATACTATAT";
    string s2 =
        "AGAGAACAATCGCTATCCGCAAGATAAAGCAAATCCTTCCAGACCAACAACCAATCAGTAGCAAAAACATTCAGCGAACAGCAAACACGC"
        "AGTTAGACCAGACGAAAACTATGGGACTAAGCTAGATAGACACACAACATACAAAAAATATAAGACAGTCGAGCCAGCCATAAGAGAGAG"
        "AGTGTGAGAGTATATCACAATAGAGCTGGATGCAGAAAGACTAAGAAGAAGTGGGTGTATACGCAGCATTAAAAGCAGAGAGATGTTCCT"
        "AACAAACAGACATATGGGTAATAAGACAATCAACAAAGCAAACATAAGAGCGAAATATTGCAGGAGTTAACTAATTAGAAGCTAAATAAA"
        "TACGAAACTACAGAGCAGTAAGACCAGATTAAATTCATGGAAGTGGAAGAACAGATAAGAAAGACAAAGAACATGAAAAAATCAGATATA"
        "AGATATAGATACTCCAGATGGACAGAACAATAACAAGTAATGCACATACTAATACACACAGAGAGCGAATCAAGACGACTGAAATATATA"
        "ACAAATATATACACATTGTACACACAACAACAGGATATTCTGAGTACCAAAGCTCAACAGTATTGCAGGATAAAATACACAGAAGAGACA"
        "CATATATACGGATATACAGGGAACCAGAAATACACGCGAATGACTGTTCTGGAAGCCATTTATAGACAGTAAGAATATGGCACCCAATAC"
        "ATACACGCACGTATACTGACACACAAAGACAGATTACATCATACACACAATGACACATTTGGGCGAGAGATTACAACCACGTATGAATAC"
        "AACAAGAGAAACCGACGCAAACAACATAGATCAGATATTTAGCTGAAAAATGTACCAGAACTTTAGAAGAAAGGAAAATACACGTACAAG"
        "CATAGGTGAGAAGCACAACCATTCGATTATGCAACAGAATCTACAGATACTATAT";
    auto chain = PacBio::CCS::SparseAlign<K>(s1, s2);
    auto fst = chain[0];
    auto lst = chain[chain.size() - 1];

    EXPECT_EQ(0, fst.first);
    EXPECT_EQ(0, fst.second);
    EXPECT_GT(lst.first, 900);
    EXPECT_GT(lst.second, 900);
}
